from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
from time import sleep
import framebuf
import urandom

def randint(min_val, max_val):
    return min_val + urandom.getrandbits(2) % (max_val - min_val + 1)


i2c = I2C(0, sda=Pin(17), scl=Pin(16), freq=400000)
oled = SSD1306_I2C(128, 64, i2c)
button = Pin(32, Pin.IN, Pin.PULL_DOWN)


dino_x = 10
dino_y = 43
dino_width = 18
dino_height = 21

game_speed =5
ground_y = 43
jump_height = 40
is_jumping = False
jump_direction = 1
animation=0


cactus_x = 128  
cactus_y = 47
cactus_width = 8
cactus_height = 16

game_end=True

# Dino sprite
dino = bytearray([
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x09, 0x01, 0x01, 0x41, 0x41, 
    0xc1, 0xc3, 0xff, 0xff, 0xe0, 0xc3, 0x07, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x80, 0xc0, 
    0xfb, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e, 0x10, 0x10, 0x1c, 0x1e, 0x1c, 
    0x17, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f])
fbdino = framebuf.FrameBuffer(dino, 19, 21, framebuf.MONO_VLSB)
dino1= bytearray([	0xff, 0xff, 0xf0, 0xff, 0xe0, 0x30, 0xff, 0xc0, 0x10, 0xff, 0xc8, 0x10, 0xff, 0xc0, 0x10, 0xff, 
	0xc0, 0x10, 0xff, 0xc1, 0xf0, 0xff, 0xc0, 0x70, 0xbf, 0x83, 0xf0, 0xbf, 0x03, 0xf0, 0x98, 0x02, 
	0xf0, 0x80, 0x03, 0xf0, 0x80, 0x03, 0xf0, 0xc0, 0x07, 0xf0, 0xe0, 0x07, 0xf0, 0xe0, 0x0f, 0xf0, 
	0xf0, 0x1f, 0xf0, 0xfc, 0xdf, 0xf0, 0xff, 0xdf, 0xf0, 0xff, 0xcf, 0xf0, 0xff, 0xff, 0xf0])
fbdino1 = framebuf.FrameBuffer(dino1, 19, 21, framebuf.MONO_HLSB)  

dino2= bytearray([	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x04, 0x00, 0x40, 0x40, 0x40, 
	0xc0, 0xc1, 0xe0, 0xc3, 0x83, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x80, 0xff, 0xfb, 
	0xff, 0xff, 0xff, 0xff, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e, 0x00, 0x08, 0x1c, 0x1e, 0x1c, 0x1d, 0x1f, 
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f])
fbdino2 = framebuf.FrameBuffer(dino2, 18, 21, framebuf.MONO_VLSB)  


cactus = bytearray([0xe7, 0xe7, 0x24, 0x24, 0x24, 0x24, 0x24, 0x04, 0x80, 0xe1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7
])
fbcactus = framebuf.FrameBuffer(cactus, 8, 16, framebuf.MONO_HLSB)
bigcactus =bytearray([0xff, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0x00, 0x33, 0x00, 
	0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x33, 0x00, 0x80, 0x40, 0xc0, 0x40, 
	0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xf3, 0xc0, 0xe3, 0xc0, 
	0xfd, 0xc0, 0xff, 0xc0])
fbbibgcactus=framebuf.FrameBuffer(bigcactus, 10,25, framebuf.MONO_HLSB) 

fbnxtobject=fbcactus

def check_collision(dino_x, dino_y, dino_width, dino_height, cactus_x, cactus_y, cactus_width, cactus_height):
    if (dino_x < cactus_x + cactus_width and  # Dino's left is before Cactus's right
        dino_x + dino_width > cactus_x and   # Dino's right is after Cactus's left
        dino_y < cactus_y + cactus_height and  # Dino's top is above Cactus's bottom
        dino_y + dino_height > cactus_y):    # Dino's bottom is below Cactus's top
        return True
    return False  

def nextobject () :
    random_number = randint(1, 2)
    print(random_number)
    if random_number==1 :
        return 8, 16,fbcactus,47
    if random_number==2 :
        return  10,25,fbbibgcactus,40
      
        
        



while True:

    if button.value() == 1 and not is_jumping:
        is_jumping = True
        jump_direction = 1  

    if is_jumping:
        dino_y -=game_speed * jump_direction
        if dino_y <= ground_y - jump_height:  
            jump_direction = -1  
        if dino_y >= ground_y:  
            dino_y = ground_y
            is_jumping = False


    cactus_x -= game_speed
    if cactus_x < -cactus_width:  # Reset position when off-screen
        cactus_x = 128
        cactus_width,cactus_height,fbnxtobject,cactus_y=nextobject ()

    print(cactus_width)
    if not is_jumping and check_collision(dino_x, dino_y, dino_width, dino_height, cactus_x, cactus_y, cactus_width, cactus_height):
        print("Game Over!")
        oled.fill(1)
        oled.text("GAME OVER!", 30, 30)
        oled.show()
        game_end=True

    oled.fill(1)
    if animation==0 or is_jumping : 
        oled.blit(fbdino, dino_x, dino_y)
    else :
        if animation==1:
            oled.blit(fbdino1, dino_x, dino_y)
        if animation==2:
            oled.blit(fbdino, dino_x, dino_y)
        if animation==3:
            oled.blit(fbdino2, dino_x, dino_y)

    oled.blit(fbnxtobject, cactus_x, cactus_y)
    oled.show()
    sleep(0.03)
    animation=animation+1
    if animation>3 :
        animation=0
